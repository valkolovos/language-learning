name: CI - Tests and Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18.20.0'
  POSTGRES_DB: test_language_learning
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432
  REDIS_URL: redis://localhost:6379

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: latest

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          backend/.venv
          ~/.cache/uv
        key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-uv-${{ hashFiles('backend/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-uv-

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        uv pip install -e ".[dev]"

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Wait for Redis
      run: |
        until redis-cli -h localhost ping; do
          echo "Waiting for Redis..."
          sleep 2
        done

    - name: Run backend tests
      working-directory: ./backend
      env:
        TEST_DATABASE_URL: postgresql+asyncpg://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
        TESTING: "true"
      run: |
        uv run pytest tests/ features/ -v --cov=app --cov-report=xml --cov-report=html

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        working-directory: ./backend

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --watchAll=false --coverage --coverageReporters=text --coverageReporters=lcov

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        working-directory: ./frontend

  quality-backend:
    name: Backend Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: latest

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          backend/.venv
          ~/.cache/uv
        key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-uv-${{ hashFiles('backend/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-uv-

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        uv pip install -e ".[dev]"

    - name: Check code formatting
      working-directory: ./backend
      run: |
        uv run black . --check
        uv run isort . --check

    - name: Run linting
      working-directory: ./backend
      run: |
        uv run flake8 app/ tests/ features/
        uv run mypy app/ tests/ features/ --exclude=.venv

    - name: Run security checks
      working-directory: ./backend
      run: |
        uv run bandit -r app/ -f json -o security-report.json || true
        echo "Security report generated"

  quality-frontend:
    name: Frontend Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Check code formatting
      working-directory: ./frontend
      run: npm run format -- --check

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run type checking
      working-directory: ./frontend
      run: npm run type-check

    - name: Check for security vulnerabilities
      working-directory: ./frontend
      run: npm audit --audit-level=moderate

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: latest

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        uv pip install -e ".[dev]"

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Wait for services
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        until redis-cli -h localhost ping; do
          echo "Waiting for Redis..."
          sleep 2
        done

    - name: Run backend integration tests
      working-directory: ./backend
      env:
        TEST_DATABASE_URL: postgresql+asyncpg://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
        TESTING: "true"
      run: |
        uv run pytest features/ -v --tb=short

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, quality-backend, quality-frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: latest

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        uv pip install -e ".[dev]"

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Wait for services
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        until redis-cli -h localhost ping; do
          echo "Waiting for Redis..."
          sleep 2
        done

    - name: Start backend server
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
        TESTING: "true"
      run: |
        uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Start frontend server
      working-directory: ./frontend
      run: |
        npm start &
        sleep 30

    - name: Run E2E tests
      working-directory: ./frontend
      run: |
        npm run test:e2e -- --watchAll=false

  test-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, quality-backend, quality-frontend, integration-tests, e2e-tests]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test Results Summary
      if: always()
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.test-backend.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.test-frontend.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Quality | ${{ needs.quality-backend.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Quality | ${{ needs.quality-frontend.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
